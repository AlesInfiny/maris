/* tslint:disable */
/* eslint-disable */
/**
 * Dressca Admin Web API
 * Dressca Admin の Web API 仕様
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { GetCatalogItemResponse } from '../models';
// @ts-ignore
import type { PagedListOfGetCatalogItemResponse } from '../models';
// @ts-ignore
import type { PostCatalogItemRequest } from '../models';
// @ts-ignore
import type { ProblemDetails } from '../models';
// @ts-ignore
import type { PutCatalogItemRequest } from '../models';
/**
 * CatalogItemsApi - axios parameter creator
 * @export
 */
export const CatalogItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary カタログから指定したカタログアイテム ID のアイテムを削除します。
         * @param {number} catalogItemId カタログアイテム ID 。
         * @param {string} [rowVersion] 行バージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCatalogItem: async (catalogItemId: number, rowVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'catalogItemId' is not null or undefined
            assertParamExists('deleteCatalogItem', 'catalogItemId', catalogItemId)
            const localVarPath = `/api/catalog-items/{catalogItemId}`
                .replace(`{${"catalogItemId"}}`, encodeURIComponent(String(catalogItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (rowVersion !== undefined) {
                localVarQueryParameter['rowVersion'] = rowVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary カタログアイテムを検索して返します。
         * @param {number | null} [brandId] カタログブランド ID です。 未設定の場合は全カタログブランドを対象にします。             
         * @param {number | null} [categoryId] カタログカテゴリ ID です。 未設定の場合は全カタログカテゴリを対象にします。             
         * @param {number} [page] ページ番号です。 未設定の場合は 1 ページ目として扱います。 1 以上の整数値を指定できます。             
         * @param {number} [pageSize] 1 ページに収めるアイテムの数です。 未設定の場合は 20 個です。 1 以上 50 以下の整数値を指定できます。             
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByQuery: async (brandId?: number | null, categoryId?: number | null, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/catalog-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (brandId !== undefined) {
                localVarQueryParameter['brandId'] = brandId;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したIDのカタログアイテムを返します。
         * @param {number} catalogItemId ID。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogItem: async (catalogItemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'catalogItemId' is not null or undefined
            assertParamExists('getCatalogItem', 'catalogItemId', catalogItemId)
            const localVarPath = `/api/catalog-items/{catalogItemId}`
                .replace(`{${"catalogItemId"}}`, encodeURIComponent(String(catalogItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary カタログにアイテムを追加します。
         * @param {PostCatalogItemRequest} postCatalogItemRequest 追加するアイテムの情報。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCatalogItem: async (postCatalogItemRequest: PostCatalogItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postCatalogItemRequest' is not null or undefined
            assertParamExists('postCatalogItem', 'postCatalogItemRequest', postCatalogItemRequest)
            const localVarPath = `/api/catalog-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCatalogItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したIDのカタログアイテムの情報を更新します。
         * @param {number} catalogItemId カタログアイテムID。
         * @param {PutCatalogItemRequest} putCatalogItemRequest 更新するカタログアイテムの情報。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCatalogItem: async (catalogItemId: number, putCatalogItemRequest: PutCatalogItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'catalogItemId' is not null or undefined
            assertParamExists('putCatalogItem', 'catalogItemId', catalogItemId)
            // verify required parameter 'putCatalogItemRequest' is not null or undefined
            assertParamExists('putCatalogItem', 'putCatalogItemRequest', putCatalogItemRequest)
            const localVarPath = `/api/catalog-items/{catalogItemId}`
                .replace(`{${"catalogItemId"}}`, encodeURIComponent(String(catalogItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putCatalogItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogItemsApi - functional programming interface
 * @export
 */
export const CatalogItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary カタログから指定したカタログアイテム ID のアイテムを削除します。
         * @param {number} catalogItemId カタログアイテム ID 。
         * @param {string} [rowVersion] 行バージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCatalogItem(catalogItemId: number, rowVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCatalogItem(catalogItemId, rowVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CatalogItemsApi.deleteCatalogItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary カタログアイテムを検索して返します。
         * @param {number | null} [brandId] カタログブランド ID です。 未設定の場合は全カタログブランドを対象にします。             
         * @param {number | null} [categoryId] カタログカテゴリ ID です。 未設定の場合は全カタログカテゴリを対象にします。             
         * @param {number} [page] ページ番号です。 未設定の場合は 1 ページ目として扱います。 1 以上の整数値を指定できます。             
         * @param {number} [pageSize] 1 ページに収めるアイテムの数です。 未設定の場合は 20 個です。 1 以上 50 以下の整数値を指定できます。             
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByQuery(brandId?: number | null, categoryId?: number | null, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedListOfGetCatalogItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByQuery(brandId, categoryId, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CatalogItemsApi.getByQuery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 指定したIDのカタログアイテムを返します。
         * @param {number} catalogItemId ID。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCatalogItem(catalogItemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCatalogItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCatalogItem(catalogItemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CatalogItemsApi.getCatalogItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary カタログにアイテムを追加します。
         * @param {PostCatalogItemRequest} postCatalogItemRequest 追加するアイテムの情報。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCatalogItem(postCatalogItemRequest: PostCatalogItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCatalogItem(postCatalogItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CatalogItemsApi.postCatalogItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 指定したIDのカタログアイテムの情報を更新します。
         * @param {number} catalogItemId カタログアイテムID。
         * @param {PutCatalogItemRequest} putCatalogItemRequest 更新するカタログアイテムの情報。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCatalogItem(catalogItemId: number, putCatalogItemRequest: PutCatalogItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCatalogItem(catalogItemId, putCatalogItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CatalogItemsApi.putCatalogItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CatalogItemsApi - factory interface
 * @export
 */
export const CatalogItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogItemsApiFp(configuration)
    return {
        /**
         * 
         * @summary カタログから指定したカタログアイテム ID のアイテムを削除します。
         * @param {number} catalogItemId カタログアイテム ID 。
         * @param {string} [rowVersion] 行バージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCatalogItem(catalogItemId: number, rowVersion?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCatalogItem(catalogItemId, rowVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary カタログアイテムを検索して返します。
         * @param {number | null} [brandId] カタログブランド ID です。 未設定の場合は全カタログブランドを対象にします。             
         * @param {number | null} [categoryId] カタログカテゴリ ID です。 未設定の場合は全カタログカテゴリを対象にします。             
         * @param {number} [page] ページ番号です。 未設定の場合は 1 ページ目として扱います。 1 以上の整数値を指定できます。             
         * @param {number} [pageSize] 1 ページに収めるアイテムの数です。 未設定の場合は 20 個です。 1 以上 50 以下の整数値を指定できます。             
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByQuery(brandId?: number | null, categoryId?: number | null, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedListOfGetCatalogItemResponse> {
            return localVarFp.getByQuery(brandId, categoryId, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したIDのカタログアイテムを返します。
         * @param {number} catalogItemId ID。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogItem(catalogItemId: number, options?: RawAxiosRequestConfig): AxiosPromise<GetCatalogItemResponse> {
            return localVarFp.getCatalogItem(catalogItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary カタログにアイテムを追加します。
         * @param {PostCatalogItemRequest} postCatalogItemRequest 追加するアイテムの情報。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCatalogItem(postCatalogItemRequest: PostCatalogItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postCatalogItem(postCatalogItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したIDのカタログアイテムの情報を更新します。
         * @param {number} catalogItemId カタログアイテムID。
         * @param {PutCatalogItemRequest} putCatalogItemRequest 更新するカタログアイテムの情報。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCatalogItem(catalogItemId: number, putCatalogItemRequest: PutCatalogItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.putCatalogItem(catalogItemId, putCatalogItemRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CatalogItemsApi - object-oriented interface
 * @export
 * @class CatalogItemsApi
 * @extends {BaseAPI}
 */
export class CatalogItemsApi extends BaseAPI {
    /**
     * 
     * @summary カタログから指定したカタログアイテム ID のアイテムを削除します。
     * @param {number} catalogItemId カタログアイテム ID 。
     * @param {string} [rowVersion] 行バージョン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogItemsApi
     */
    public deleteCatalogItem(catalogItemId: number, rowVersion?: string, options?: RawAxiosRequestConfig) {
        return CatalogItemsApiFp(this.configuration).deleteCatalogItem(catalogItemId, rowVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary カタログアイテムを検索して返します。
     * @param {number | null} [brandId] カタログブランド ID です。 未設定の場合は全カタログブランドを対象にします。             
     * @param {number | null} [categoryId] カタログカテゴリ ID です。 未設定の場合は全カタログカテゴリを対象にします。             
     * @param {number} [page] ページ番号です。 未設定の場合は 1 ページ目として扱います。 1 以上の整数値を指定できます。             
     * @param {number} [pageSize] 1 ページに収めるアイテムの数です。 未設定の場合は 20 個です。 1 以上 50 以下の整数値を指定できます。             
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogItemsApi
     */
    public getByQuery(brandId?: number | null, categoryId?: number | null, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CatalogItemsApiFp(this.configuration).getByQuery(brandId, categoryId, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したIDのカタログアイテムを返します。
     * @param {number} catalogItemId ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogItemsApi
     */
    public getCatalogItem(catalogItemId: number, options?: RawAxiosRequestConfig) {
        return CatalogItemsApiFp(this.configuration).getCatalogItem(catalogItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary カタログにアイテムを追加します。
     * @param {PostCatalogItemRequest} postCatalogItemRequest 追加するアイテムの情報。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogItemsApi
     */
    public postCatalogItem(postCatalogItemRequest: PostCatalogItemRequest, options?: RawAxiosRequestConfig) {
        return CatalogItemsApiFp(this.configuration).postCatalogItem(postCatalogItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したIDのカタログアイテムの情報を更新します。
     * @param {number} catalogItemId カタログアイテムID。
     * @param {PutCatalogItemRequest} putCatalogItemRequest 更新するカタログアイテムの情報。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogItemsApi
     */
    public putCatalogItem(catalogItemId: number, putCatalogItemRequest: PutCatalogItemRequest, options?: RawAxiosRequestConfig) {
        return CatalogItemsApiFp(this.configuration).putCatalogItem(catalogItemId, putCatalogItemRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

