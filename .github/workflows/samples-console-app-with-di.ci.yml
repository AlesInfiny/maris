---
# cSpell:ignore cobertura dorny irongut marocchino NOLOGO OPTOUT

name: ConsoleAppWithDI CI

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'samples/ConsoleAppWithDI/**'
      - '.github/workflows/samples-console-app-with-di.ci.yml'
  workflow_dispatch:

defaults:
  run:
    working-directory: samples/ConsoleAppWithDI/solution

jobs:
  build:
    name: コンソールアプリケーションのビルド
    runs-on: ubuntu-latest
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      BUILD_CONFIGURATION: Debug

    steps:
      - name: ブランチのチェックアウト
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: application-build
        name: アプリケーションのビルド
        run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity minimal > build-result.txt

      - name: ビルド結果の表示
        shell: bash
        if: ${{ success() || (failure() && steps.application-build.conclusion == 'failure') }}
        run: |
          echo '## Build Result :gear:' >> $GITHUB_STEP_SUMMARY
          cat build-result.txt | sed -n -e 's/^/> /p' >> $GITHUB_STEP_SUMMARY

      - id: run-tests
        name: テストの実行
        continue-on-error: true
        run: dotnet test --no-build --logger trx --verbosity normal --configuration ${{ env.BUILD_CONFIGURATION }} --collect "XPlat Code Coverage"

      - id: create-test-result-report
        name: テスト結果ページの作成
        uses: dorny/test-reporter@v1
        if: ${{ success() || (failure() && steps.run-tests.conclusion == 'failure') }}
        with:
          name: 'Test results'
          path: '**/TestResults/*.trx'
          path-replace-backslashes: 'true'
          reporter: 'dotnet-trx'
          only-summary: 'false'
          list-suites: 'all'
          list-tests: 'all'
          max-annotations: '10'
          fail-on-error: 'true'

      - name: テスト結果のサマリー表示
        shell: bash
        if: ${{ success() || (failure() && steps.run-tests.conclusion == 'failure') }}
        run: |
          echo '## Test Result :memo:' >> $GITHUB_STEP_SUMMARY
          echo 'Test was a **${{ steps.create-test-result-report.outputs.conclusion }}**.' >> $GITHUB_STEP_SUMMARY
          echo 'Completed in ${{ steps.create-test-result-report.outputs.time }}ms with **${{ steps.create-test-result-report.outputs.passed }}** passed, **${{ steps.create-test-result-report.outputs.failed }}** failed and ${{ steps.create-test-result-report.outputs.skipped }} skipped.' >> $GITHUB_STEP_SUMMARY

      - id: create-coverage-report
        name: コードカバレッジレポートの解析と作成
        uses: danielpalme/ReportGenerator-GitHub-Action@5
        if: ${{ success() || (failure() && steps.run-tests.conclusion == 'failure') }}
        with:
          reports: '**/TestResults/*/coverage.cobertura.xml'
          targetdir: 'CoverageReport'
          reporttypes: 'MarkdownSummaryGithub'

      - name: コードカバレッジの結果表示
        shell: bash
        if: ${{ success() || (failure() && steps.run-tests.conclusion == 'failure') }}
        run: |
          sed -i s/'# Summary'/'## Coverage :triangular_ruler:'/g CoverageReport/SummaryGithub.md
          sed -i -e '/^## Coverage/d' CoverageReport/SummaryGithub.md
          cat CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY

      - name: コードカバレッジの結果をPull-requestに表示
        uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ github.event_name == 'pull_request' && (success() || (failure() && steps.run-tests.conclusion == 'failure')) }}
        with:
          recreate: true
          path: CoverageReport/SummaryGithub.md
