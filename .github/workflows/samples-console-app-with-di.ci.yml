---
# cspell:ignore danielpalme dorny marocchino NOLOGO OPTOUT reporttypes targetdir

name: ConsoleAppWithDI CI

on:
  pull_request:
    branches: [main]
    paths:
      - 'samples/ConsoleAppWithDI/**'
      - '.github/workflows/samples-console-app-with-di.ci.yml'
  workflow_dispatch:

env:
  WORKING_DIRECTORY: samples/ConsoleAppWithDI/solution

defaults:
  run:
    working-directory: samples/ConsoleAppWithDI/solution

jobs:
  build:
    name: コンソールアプリケーションのビルド
    runs-on: ubuntu-latest
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      BUILD_CONFIGURATION: Debug
      BUILD_SUMMARY_FILE: BuildSummary.md
    permissions:
      checks: write
      contents: read

    steps:
      - name: ブランチのチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: .NET SDK のセットアップ
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.*"

      - name: アプリケーションのビルド
        id: application-build
        shell: bash
        continue-on-error: true
        run: |
          echo '## Build Result :gear:' >> $GITHUB_STEP_SUMMARY
          dotnet build --nologo --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity minimal > build-result.txt
          echo ':heavy_check_mark: アプリケーションのビルドに成功しました。' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat build-result.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
    
      - name: ビルド失敗時の結果表示
        shell: bash
        if: ${{ steps.application-build.outcome == 'failure' }}
        run: |
          echo ':x: アプリケーションのビルドに失敗しました。  ' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat build-result.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          exit 1

      - id: run-tests
        name: テストの実行
        continue-on-error: true
        run: dotnet test --no-build --logger trx --verbosity normal --configuration ${{ env.BUILD_CONFIGURATION }} --collect "XPlat Code Coverage"

      - id: create-test-result-report
        name: テスト結果ページの作成
        uses: dorny/test-reporter@6e6a65b7a0bd2c9197df7d0ae36ac5cee784230c  # v2.0.0
        if: ${{ success() || (failure() && steps.run-tests.conclusion == 'failure') }}
        with:
          name: 'Test results'
          path: '**/TestResults/*.trx'
          path-replace-backslashes: 'true'
          reporter: 'dotnet-trx'
          only-summary: 'false'
          list-suites: 'all'
          list-tests: 'all'
          max-annotations: '10'
          fail-on-error: 'true'

      - name: テスト結果のサマリー表示
        shell: bash
        if: ${{ success() || (failure() && steps.run-tests.conclusion == 'failure') }}
        run: |
          echo '## Test Result :memo:' >> ${{ env.BUILD_SUMMARY_FILE }}
          echo 'Test was a **${{ steps.create-test-result-report.outputs.conclusion }}**.' >> ${{ env.BUILD_SUMMARY_FILE }}
          echo 'Completed in ${{ steps.create-test-result-report.outputs.time }}ms with **${{ steps.create-test-result-report.outputs.passed }}** passed, **${{ steps.create-test-result-report.outputs.failed }}** failed and ${{ steps.create-test-result-report.outputs.skipped }} skipped.' >> ${{ env.BUILD_SUMMARY_FILE }}
          cat ${{ env.BUILD_SUMMARY_FILE }} >> $GITHUB_STEP_SUMMARY

      - id: create-coverage-report
        name: コードカバレッジレポートの解析と作成
        uses: danielpalme/ReportGenerator-GitHub-Action@f1927db1dbfc029b056583ee488832e939447fe6  # v5.4.4
        if: ${{ success() || (failure() && steps.run-tests.conclusion == 'failure') }}
        with:
          reports: '**/TestResults/*/coverage.cobertura.xml'
          targetdir: '${{ env.WORKING_DIRECTORY }}/CoverageReport'
          reporttypes: 'MarkdownSummaryGithub'

      - name: コードカバレッジの結果表示
        shell: bash
        if: ${{ success() || (failure() && steps.run-tests.conclusion == 'failure') }}
        run: |
          sed -i s/'# Summary'/'## Coverage :triangular_ruler:'/g CoverageReport/SummaryGithub.md
          sed -i -e '/^## Coverage$/d' CoverageReport/SummaryGithub.md
          cat CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
